#!/usr/bin/env perl
use strict;
use warnings;
use v5.16.0;
package
    natas15;
# VERSION
# ABSTRACT: solve level 15 of overthewire.org's Natas server-side security war games

use Hack::Natas::15;

=head1 NAME

natas15 - solve level 15 of overthewire.org's Natas war games

=head1 SYNOPSIS

    natas15 password

=head1 OPTIONS

=over 4

=item * B<--wrong>, --no-wrong

Use the wrong SQL to find the incorrect password.

This is useful as a teaching tool, to illustrate the effect of
neglecting case-sensitivity in your injected SQL.

=back

=cut

use Getopt::Long;
my $opts = { version => 0 };
GetOptions( $opts, 'version' );
if ($opts->{version}) {
    say __PACKAGE__ . ' version ' . (__PACKAGE__->VERSION // 'dev');
    exit;
}
unless (@ARGV == 1) {
    require Pod::Usage;
    Pod::Usage::pod2usage( -msg => 'Incorrect usage' );
}

=head1 DESCRIPTION

L<overthewire.org|http://www.overthewire.org/wargames/> has a series of war games.
Natas is the server-side security challenge.

Level 15 requires you to do blind SQL injection. Guessing each one-character
slice of a 32-character password is tedious and prone to errors if done manually,
so this script automates the process. Simply provide the password for level 15
as the first argument on the command line

=cut

my $hack = Hack::Natas::15->new(http_pass => shift @ARGV);
local $SIG{INT} = sub { printf "\rPassword so far: %s\n", $hack->password_so_far; exit 1 };
$hack->run;


=head1 SEE ALSO

=over 4

=item * L<natas16>

=item * L<Hack::Natas>

=back
